from flask import Flask, request
import requests
import os
import google.generativeai as genai
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

app = Flask(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –≤–∞—à–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ .env —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ—Å—Ç–∏–Ω–≥–∞)
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")
PAGE_ACCESS_TOKEN = os.getenv("PAGE_ACCESS_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# –í—ã–≤–æ–¥–∏–º —Ç–æ–∫–µ–Ω—ã (–æ–±—Ä–µ–∑–∞–Ω–Ω—ã–µ) –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.info(f"‚úÖ VERIFY_TOKEN (first 10): {VERIFY_TOKEN[:10] if VERIFY_TOKEN else 'Not found'}")
logging.info(f"‚úÖ PAGE_ACCESS_TOKEN (first 10): {PAGE_ACCESS_TOKEN[:10] if PAGE_ACCESS_TOKEN else 'Not found'}")
logging.info(f"‚úÖ GEMINI_API_KEY (first 10): {GEMINI_API_KEY[:10] if GEMINI_API_KEY else 'Not found'}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤
if not VERIFY_TOKEN or not PAGE_ACCESS_TOKEN or not GEMINI_API_KEY:
    logging.error("‚ùå –û—à–∏–±–∫–∞: –û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å.")
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å, –∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 500 –æ—à–∏–±–∫—É –∏–ª–∏ –∏–º–µ—Ç—å –∑–∞–≥–ª—É—à–∫—É
    # exit(1) # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞ –¥–∞–∂–µ –±–µ–∑ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini
model = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –∫–∞–∫ None –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
try:
    if GEMINI_API_KEY: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á API —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel("gemini-pro")
        logging.info("‚úÖ Gemini API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    else:
        logging.warning("‚ö†Ô∏è GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. Gemini –º–æ–¥–µ–ª—å –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini API: {e}", exc_info=True) # –î–æ–±–∞–≤–ª—è–µ–º exc_info –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ traceback

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
SYSTEM_PROMPT = """
Siz Hijama markazining sun'iy intellekt yordamchisiz.
Siz har doim mijozlarga muloyim, hurmatli va foydali tarzda javob berishingiz kerak.
Savollarga qisqa, tushunarli va do'stona ohangda javob bering.
Faqat o'zbek tilida yozing.
Siz Hijama Centre markazining rasmiy operatori bo‚Äòlib, mijozlar savollariga yordam berasiz.
Quyidagilarni har doim hisobga oling:
Xizmatlar: hijama, bankalar qo‚Äòyish, massaj, qon yuritish va boshqa tabiiy usullar.
Manzil: Toshkent, Yakkasaroy tumani, Ubaydullaev ko‚Äòchasi 16-uy.
Telefon: +998 93 161 27 29
Telegram: @HijamaCentreBot
"""
# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ –≤–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
# SYSTEM_PROMPT = """
# –°–∏–∑ Hijama Centre –º–∞—Ä–∫–∞–∑–∏–Ω–∏–Ω–≥ —Ä–∞—Å–º–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏ –±—û–ª–∏–±, –º–∏–∂–æ–∑–ª–∞—Ä —Å–∞–≤–æ–ª–ª–∞—Ä–∏–≥–∞ —ë—Ä–¥–∞–º –±–µ—Ä–∞—Å–∏–∑.
# “ö—É–π–∏–¥–∞–≥–∏–ª–∞—Ä–Ω–∏ “≥–∞—Ä –¥–æ–∏–º “≥–∏—Å–æ–±–≥–∞ –æ–ª–∏–Ω–≥:
# - –•–∏–∑–º–∞—Ç–ª–∞—Ä: “≥–∏–∂–∞–º–∞, –±–∞–Ω–∫–∞–ª–∞—Ä “õ—û–π–∏—à, –º–∞—Å—Å–∞–∂, “õ–æ–Ω —é—Ä–∏—Ç–∏—à –≤–∞ –±–æ—à“õ–∞ —Ç–∞–±–∏–∏–π —É—Å—É–ª–ª–∞—Ä.
# - –ú–∞–Ω–∑–∏–ª: –¢–æ—à–∫–µ–Ω—Ç, –Ø–∫–∫–∞—Å–∞—Ä–æ–π —Ç—É–º–∞–Ω–∏, –£–±–∞–π–¥—É–ª–ª–∞–µ–≤ –∫—û—á–∞—Å–∏ 16-—É–π.
# - –¢–µ–ª–µ—Ñ–æ–Ω: +998 93 161 27 29
# - Telegram: @HijamaCentreBot

# –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ “õ–∞–Ω–¥–∞–π —Å–∞–≤–æ–ª –±–µ—Ä–º–∞—Å–∏–Ω, —Ö—É—à–º—É–æ–º–∞–ª–∞ –≤–∞ —ë—Ä–¥–∞–º—á”£ –±—û–ª–∏–± –∂–∞–≤–æ–± –±–µ—Ä–∏–Ω–≥. –ê–≥–∞—Ä —Å–∞–≤–æ–ª —Ç—É—à—É–Ω–∞—Ä—Å–∏–∑ –±—û–ª—Å–∞, —Ö—É—à–º—É–æ–º–∞–ª–∞ “≥–æ–ª–¥–∞ “õ–∞–π—Ç–∞ —Å—û—Ä–∞–Ω–≥.
# """


# –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è (GET)
@app.route("/webhook", methods=["GET"])
def verify():
    mode = request.args.get("hub.mode")
    token = request.args.get("hub.verify_token")
    challenge = request.args.get("hub.challenge")
    logging.info(f"üåê [VERIFY] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é. mode: {mode} | token: {token[:10] if token else 'None'}")

    if mode == "subscribe" and token == VERIFY_TOKEN:
        logging.info("‚úÖ –í–µ–±—Ö—É–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º challenge.")
        return challenge, 200
    logging.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π verify token –∏–ª–∏ —Ä–µ–∂–∏–º. –û–∂–∏–¥–∞–ª—Å—è '{VERIFY_TOKEN}', –ø–æ–ª—É—á–µ–Ω '{token}'.")
    return "Verification failed", 403

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (POST)
@app.route("/webhook", methods=["POST"]) # –ú–∞—Ä—à—Ä—É—Ç '/webhook' –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def webhook():
    data = request.get_json()
    logging.info(f"üì© [WEBHOOK] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")

    if not data:
        logging.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ POST-–∑–∞–ø—Ä–æ—Å–∞.")
        return "ok", 200

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ Instagram
    if data.get("object") == "instagram":
        for entry in data.get("entry", []):
            for messaging_event in entry.get("messaging", []):
                sender_id = messaging_event["sender"]["id"]
                if "message" in messaging_event and "text" in messaging_event["message"]:
                    user_msg = messaging_event["message"]["text"]
                    logging.info(f"üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({sender_id}): {user_msg}")

                    if model: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å Gemini –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
                        reply = ask_gemini(user_msg)
                        logging.info(f"ü§ñ –û—Ç–≤–µ—Ç Gemini: {reply}")
                    else:
                        reply = "Kechirasiz, AI xizmati hozircha mavjud emas. Iltimos, keyinroq urinib ko'ring."
                        logging.error("‚ùå Gemini –º–æ–¥–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.")

                    send_message(sender_id, reply)
                elif "postback" in messaging_event:
                    logging.info(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ postback-—Å–æ–±—ã—Ç–∏–µ –æ—Ç {sender_id}: {messaging_event['postback']}")
                else:
                    logging.info(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'message' –æ—Ç {sender_id}: {messaging_event}")
    else:
        logging.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç Instagram: {data.get('object')}")

    return "ok", 200

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini
def ask_gemini(question):
    if not model:
        logging.error("‚ùå Gemini –º–æ–¥–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.")
        return "Kechirasiz, AI xizmati hozirda ishlamayapti."
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SYSTEM_PROMPT –∫–∞–∫ —á–∞—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞, –∫–∞–∫ –≤ –≤–∞—à–µ–º –ø–µ—Ä–≤–æ–º –∫–æ–¥–µ, —ç—Ç–æ –±–æ–ª–µ–µ —Ç–∏–ø–∏—á–Ω–æ –¥–ª—è Gemini API
        # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–æ–ª—å "system", —Ç–æ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ ChatSession, –∞ –Ω–µ generate_content –Ω–∞–ø—Ä—è–º—É—é
        response = model.generate_content(SYSTEM_PROMPT + f"\nSavol: {question}\nJavob:")
        return response.text.strip()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini: {e}", exc_info=True) # –î–æ–±–∞–≤–ª—è–µ–º exc_info=True –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ traceback
        return "Kechirasiz, xatolik yuz berdi. Iltimos, qayta urinib ko'ring."

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Instagram
def send_message(recipient_id, message_text):
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω URL: —É–±—Ä–∞–Ω Markdown-—Ñ–æ—Ä–º–∞—Ç
    url = f"https://graph.facebook.com/v18.0/me/messages?access_token={PAGE_ACCESS_TOKEN}"
    headers = {"Content-Type": "application/json"}
    payload = {
        "recipient": {"id": recipient_id},
        "message": {"text": message_text}
    }

    if not PAGE_ACCESS_TOKEN:
        logging.error("‚ùå PAGE_ACCESS_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    try:
        r = requests.post(url, headers=headers, json=payload)
        r.raise_for_status() # –í—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è HTTP –æ—à–∏–±–æ–∫ (4xx –∏–ª–∏ 5xx)
        logging.info(f"üì§ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ({recipient_id}): {message_text[:50]}...") # –û–±—Ä–µ–∑–∞–µ–º –¥–ª—è –ª–æ–≥–∞
        logging.info(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Meta: {r.status_code} - {r.text}")
    except requests.exceptions.RequestException as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è Meta API: {e}", exc_info=True)
        if r is not None:
            logging.error(f"‚ùå –û—Ç–≤–µ—Ç Meta (–æ—à–∏–±–∫–∞): {r.status_code} - {r.text}")
    except Exception as e:
        logging.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    logging.info(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    app.run(host="0.0.0.0", port=port, debug=True) # debug=True –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
