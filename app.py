from flask import Flask, request
import os
import requests
from google.generativeai import GenerativeModel, configure
import logging

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
VERIFY_TOKEN = os.environ.get("VERIFY_TOKEN")
PAGE_ACCESS_TOKEN = os.environ.get("PAGE_ACCESS_TOKEN")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask ===
app = Flask(__name__)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini ===
if not GEMINI_API_KEY:
    logger.error("GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
else:
    configure(api_key=GEMINI_API_KEY)
    gemini_model = GenerativeModel("gemini-pro")
    logger.info("‚úÖ –ú–æ–¥–µ–ª—å Gemini –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# === Webhook GET (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ) ===
@app.route("/webhook", methods=["GET"])
def verify():
    mode = request.args.get("hub.mode")
    token = request.args.get("hub.verify_token")
    challenge = request.args.get("hub.challenge")
    
    if mode == "subscribe" and token == VERIFY_TOKEN:
        logger.info("‚úÖ –í–µ–±—Ö—É–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º challenge.")
        return challenge, 200
    else:
        logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!")
        return "Verification failed", 403

# === Webhook POST (–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π) ===
@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")
    
    if "entry" in data:
        for entry in data["entry"]:
            messaging = entry.get("messaging")
            if messaging:
                for message_event in messaging:
                    sender_id = message_event["sender"]["id"]
                    if "message" in message_event and "text" in message_event["message"]:
                        user_message = message_event["message"]["text"]
                        logger.info(f"üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({sender_id}): {user_message}")
                        
                        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Gemini
                        if GEMINI_API_KEY:
                            try:
                                response = gemini_model.generate_content(user_message)
                                reply = response.text
                                logger.info(f"ü§ñ –û—Ç–≤–µ—Ç Gemini: {reply}")
                            except Exception as e:
                                reply = "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
                                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Gemini: {e}")
                        else:
                            reply = "Gemini API Key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
                        
                        send_message(sender_id, reply)
    
    return "EVENT_RECEIVED", 200

# === –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ===
def send_message(recipient_id, message_text):
    params = {"access_token": PAGE_ACCESS_TOKEN}
    headers = {"Content-Type": "application/json"}
    data = {
        "recipient": {"id": recipient_id},
        "message": {"text": message_text}
    }
    
    r = requests.post("https://graph.facebook.com/v18.0/me/messages",
                      params=params, headers=headers, json=data)
    logger.info(f"üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Meta: {r.status_code} - {r.text}")

# === –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ===
if __name__ == "__main__":
    app.run(debug=True)
