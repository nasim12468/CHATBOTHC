from flask import Flask, request
import requests
import os
import google.generativeai as genai

app = Flask(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")
PAGE_ACCESS_TOKEN = os.getenv("PAGE_ACCESS_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# –í—ã–≤–æ–¥–∏–º —Ç–æ–∫–µ–Ω—ã (–æ–±—Ä–µ–∑–∞–Ω–Ω—ã–µ) –≤ –∫–æ–Ω—Å–æ–ª—å
print("‚úÖ VERIFY_TOKEN (first 10):", VERIFY_TOKEN[:10] if VERIFY_TOKEN else "Not found")
print("‚úÖ PAGE_ACCESS_TOKEN (first 10):", PAGE_ACCESS_TOKEN[:10] if PAGE_ACCESS_TOKEN else "Not found")
print("‚úÖ GEMINI_API_KEY (first 10):", GEMINI_API_KEY[:10] if GEMINI_API_KEY else "Not found")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤
if not VERIFY_TOKEN or not PAGE_ACCESS_TOKEN or not GEMINI_API_KEY:
    print("‚ùå –û—à–∏–±–∫–∞: –û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-pro")

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
SYSTEM_PROMPT = """
Siz Hijama markazining sun'iy intellekt yordamchisiz.
Siz har doim mijozlarga muloyim, hurmatli va foydali tarzda javob berishingiz kerak.
Savollarga qisqa, tushunarli va do'stona ohangda javob bering.
Faqat o'zbek tilida yozing.
"""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Meta App (GET)
@app.route("/", methods=["GET"])
def verify():
    mode = request.args.get("hub.mode")
    token = request.args.get("hub.verify_token")
    challenge = request.args.get("hub.challenge")
    print("üåê [VERIFY] mode:", mode, "| token:", token)

    if mode == "subscribe" and token == VERIFY_TOKEN:
        print("‚úÖ –í–µ–±—Ö—É–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
        return challenge, 200
    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π verify token")
    return "Verification failed", 403

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (POST)
@app.route("/", methods=["POST"])
def webhook():
    data = request.get_json()
    print("üì© [WEBHOOK] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", data)

    for entry in data.get("entry", []):
        for messaging_event in entry.get("messaging", []):
            sender_id = messaging_event["sender"]["id"]
            if "message" in messaging_event and "text" in messaging_event["message"]:
                user_msg = messaging_event["message"]["text"]
                print(f"üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({sender_id}): {user_msg}")

                reply = ask_gemini(user_msg)
                print("ü§ñ –û—Ç–≤–µ—Ç Gemini:", reply)

                send_message(sender_id, reply)
            else:
                print("‚ö†Ô∏è –ù–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ message")
    return "ok", 200

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini
def ask_gemini(question):
    try:
        response = model.generate_content(SYSTEM_PROMPT + f"\nSavol: {question}\nJavob:")
        return response.text.strip()
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini:", e)
        return "Kechirasiz, xatolik yuz berdi. Iltimos, qayta urinib ko'ring."

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Instagram
def send_message(recipient_id, message_text):
    params = {"access_token": PAGE_ACCESS_TOKEN}
    headers = {"Content-Type": "application/json"}
    data = {
        "recipient": {"id": recipient_id},
        "message": {"text": message_text}
    }

    try:
        r = requests.post("https://graph.facebook.com/v18.0/me/messages", params=params, headers=headers, json=data)
        print(f"üì§ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ({recipient_id}): {message_text}")
        print("üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Meta:", r.status_code, r.text)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", e)

# –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤...")
    app.run(debug=True, host="0.0.0.0", port=5000)
